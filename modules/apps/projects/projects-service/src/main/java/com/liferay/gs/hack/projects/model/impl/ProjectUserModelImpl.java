/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.gs.hack.projects.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.exportimport.kernel.lar.StagedModelType;

import com.liferay.gs.hack.projects.model.ProjectUser;
import com.liferay.gs.hack.projects.model.ProjectUserModel;
import com.liferay.gs.hack.projects.model.ProjectUserSoap;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the ProjectUser service. Represents a row in the &quot;PS_ProjectUser&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link ProjectUserModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ProjectUserImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ProjectUserImpl
 * @see ProjectUser
 * @see ProjectUserModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class ProjectUserModelImpl extends BaseModelImpl<ProjectUser>
	implements ProjectUserModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a project user model instance should use the {@link ProjectUser} interface instead.
	 */
	public static final String TABLE_NAME = "PS_ProjectUser";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "projectUserId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "projectId", Types.BIGINT },
			{ "employeeId", Types.BIGINT },
			{ "roleId", Types.BIGINT },
			{ "billRate", Types.DOUBLE }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("projectUserId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("projectId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("employeeId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("roleId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("billRate", Types.DOUBLE);
	}

	public static final String TABLE_SQL_CREATE = "create table PS_ProjectUser (uuid_ VARCHAR(75) null,projectUserId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,projectId LONG,employeeId LONG,roleId LONG,billRate DOUBLE)";
	public static final String TABLE_SQL_DROP = "drop table PS_ProjectUser";
	public static final String ORDER_BY_JPQL = " ORDER BY projectUser.projectId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY PS_ProjectUser.projectId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.gs.hack.projects.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.gs.hack.projects.model.ProjectUser"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.gs.hack.projects.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.gs.hack.projects.model.ProjectUser"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.gs.hack.projects.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.gs.hack.projects.model.ProjectUser"),
			true);
	public static final long COMPANYID_COLUMN_BITMASK = 1L;
	public static final long EMPLOYEEID_COLUMN_BITMASK = 2L;
	public static final long GROUPID_COLUMN_BITMASK = 4L;
	public static final long PROJECTID_COLUMN_BITMASK = 8L;
	public static final long ROLEID_COLUMN_BITMASK = 16L;
	public static final long UUID_COLUMN_BITMASK = 32L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static ProjectUser toModel(ProjectUserSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		ProjectUser model = new ProjectUserImpl();

		model.setUuid(soapModel.getUuid());
		model.setProjectUserId(soapModel.getProjectUserId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setProjectId(soapModel.getProjectId());
		model.setEmployeeId(soapModel.getEmployeeId());
		model.setRoleId(soapModel.getRoleId());
		model.setBillRate(soapModel.getBillRate());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<ProjectUser> toModels(ProjectUserSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<ProjectUser> models = new ArrayList<ProjectUser>(soapModels.length);

		for (ProjectUserSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.gs.hack.projects.service.util.ServiceProps.get(
				"lock.expiration.time.com.liferay.gs.hack.projects.model.ProjectUser"));

	public ProjectUserModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _projectUserId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setProjectUserId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _projectUserId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ProjectUser.class;
	}

	@Override
	public String getModelClassName() {
		return ProjectUser.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("projectUserId", getProjectUserId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("projectId", getProjectId());
		attributes.put("employeeId", getEmployeeId());
		attributes.put("roleId", getRoleId());
		attributes.put("billRate", getBillRate());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long projectUserId = (Long)attributes.get("projectUserId");

		if (projectUserId != null) {
			setProjectUserId(projectUserId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Long projectId = (Long)attributes.get("projectId");

		if (projectId != null) {
			setProjectId(projectId);
		}

		Long employeeId = (Long)attributes.get("employeeId");

		if (employeeId != null) {
			setEmployeeId(employeeId);
		}

		Long roleId = (Long)attributes.get("roleId");

		if (roleId != null) {
			setRoleId(roleId);
		}

		Double billRate = (Double)attributes.get("billRate");

		if (billRate != null) {
			setBillRate(billRate);
		}
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return StringPool.BLANK;
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getProjectUserId() {
		return _projectUserId;
	}

	@Override
	public void setProjectUserId(long projectUserId) {
		_projectUserId = projectUserId;
	}

	@Override
	public String getProjectUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getProjectUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return StringPool.BLANK;
		}
	}

	@Override
	public void setProjectUserUuid(String projectUserUuid) {
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return StringPool.BLANK;
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public long getProjectId() {
		return _projectId;
	}

	@Override
	public void setProjectId(long projectId) {
		_columnBitmask = -1L;

		if (!_setOriginalProjectId) {
			_setOriginalProjectId = true;

			_originalProjectId = _projectId;
		}

		_projectId = projectId;
	}

	public long getOriginalProjectId() {
		return _originalProjectId;
	}

	@JSON
	@Override
	public long getEmployeeId() {
		return _employeeId;
	}

	@Override
	public void setEmployeeId(long employeeId) {
		_columnBitmask |= EMPLOYEEID_COLUMN_BITMASK;

		if (!_setOriginalEmployeeId) {
			_setOriginalEmployeeId = true;

			_originalEmployeeId = _employeeId;
		}

		_employeeId = employeeId;
	}

	public long getOriginalEmployeeId() {
		return _originalEmployeeId;
	}

	@JSON
	@Override
	public long getRoleId() {
		return _roleId;
	}

	@Override
	public void setRoleId(long roleId) {
		_columnBitmask |= ROLEID_COLUMN_BITMASK;

		if (!_setOriginalRoleId) {
			_setOriginalRoleId = true;

			_originalRoleId = _roleId;
		}

		_roleId = roleId;
	}

	public long getOriginalRoleId() {
		return _originalRoleId;
	}

	@JSON
	@Override
	public double getBillRate() {
		return _billRate;
	}

	@Override
	public void setBillRate(double billRate) {
		_billRate = billRate;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(PortalUtil.getClassNameId(
				ProjectUser.class.getName()));
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			ProjectUser.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ProjectUser toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ProjectUser)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ProjectUserImpl projectUserImpl = new ProjectUserImpl();

		projectUserImpl.setUuid(getUuid());
		projectUserImpl.setProjectUserId(getProjectUserId());
		projectUserImpl.setGroupId(getGroupId());
		projectUserImpl.setCompanyId(getCompanyId());
		projectUserImpl.setUserId(getUserId());
		projectUserImpl.setUserName(getUserName());
		projectUserImpl.setCreateDate(getCreateDate());
		projectUserImpl.setModifiedDate(getModifiedDate());
		projectUserImpl.setProjectId(getProjectId());
		projectUserImpl.setEmployeeId(getEmployeeId());
		projectUserImpl.setRoleId(getRoleId());
		projectUserImpl.setBillRate(getBillRate());

		projectUserImpl.resetOriginalValues();

		return projectUserImpl;
	}

	@Override
	public int compareTo(ProjectUser projectUser) {
		int value = 0;

		if (getProjectId() < projectUser.getProjectId()) {
			value = -1;
		}
		else if (getProjectId() > projectUser.getProjectId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ProjectUser)) {
			return false;
		}

		ProjectUser projectUser = (ProjectUser)obj;

		long primaryKey = projectUser.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		ProjectUserModelImpl projectUserModelImpl = this;

		projectUserModelImpl._originalUuid = projectUserModelImpl._uuid;

		projectUserModelImpl._originalGroupId = projectUserModelImpl._groupId;

		projectUserModelImpl._setOriginalGroupId = false;

		projectUserModelImpl._originalCompanyId = projectUserModelImpl._companyId;

		projectUserModelImpl._setOriginalCompanyId = false;

		projectUserModelImpl._setModifiedDate = false;

		projectUserModelImpl._originalProjectId = projectUserModelImpl._projectId;

		projectUserModelImpl._setOriginalProjectId = false;

		projectUserModelImpl._originalEmployeeId = projectUserModelImpl._employeeId;

		projectUserModelImpl._setOriginalEmployeeId = false;

		projectUserModelImpl._originalRoleId = projectUserModelImpl._roleId;

		projectUserModelImpl._setOriginalRoleId = false;

		projectUserModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<ProjectUser> toCacheModel() {
		ProjectUserCacheModel projectUserCacheModel = new ProjectUserCacheModel();

		projectUserCacheModel.uuid = getUuid();

		String uuid = projectUserCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			projectUserCacheModel.uuid = null;
		}

		projectUserCacheModel.projectUserId = getProjectUserId();

		projectUserCacheModel.groupId = getGroupId();

		projectUserCacheModel.companyId = getCompanyId();

		projectUserCacheModel.userId = getUserId();

		projectUserCacheModel.userName = getUserName();

		String userName = projectUserCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			projectUserCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			projectUserCacheModel.createDate = createDate.getTime();
		}
		else {
			projectUserCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			projectUserCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			projectUserCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		projectUserCacheModel.projectId = getProjectId();

		projectUserCacheModel.employeeId = getEmployeeId();

		projectUserCacheModel.roleId = getRoleId();

		projectUserCacheModel.billRate = getBillRate();

		return projectUserCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(25);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", projectUserId=");
		sb.append(getProjectUserId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", projectId=");
		sb.append(getProjectId());
		sb.append(", employeeId=");
		sb.append(getEmployeeId());
		sb.append(", roleId=");
		sb.append(getRoleId());
		sb.append(", billRate=");
		sb.append(getBillRate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(40);

		sb.append("<model><model-name>");
		sb.append("com.liferay.gs.hack.projects.model.ProjectUser");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>projectUserId</column-name><column-value><![CDATA[");
		sb.append(getProjectUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>projectId</column-name><column-value><![CDATA[");
		sb.append(getProjectId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>employeeId</column-name><column-value><![CDATA[");
		sb.append(getEmployeeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>roleId</column-name><column-value><![CDATA[");
		sb.append(getRoleId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>billRate</column-name><column-value><![CDATA[");
		sb.append(getBillRate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = ProjectUser.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			ProjectUser.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _projectUserId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _projectId;
	private long _originalProjectId;
	private boolean _setOriginalProjectId;
	private long _employeeId;
	private long _originalEmployeeId;
	private boolean _setOriginalEmployeeId;
	private long _roleId;
	private long _originalRoleId;
	private boolean _setOriginalRoleId;
	private double _billRate;
	private long _columnBitmask;
	private ProjectUser _escapedModel;
}